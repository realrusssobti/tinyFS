Index: libTinyFS.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"tinyFS.h\"\n#include \"libTinyFS.h\"\n#include \"libDisk.h\"\n#include \"linkedList.h\"\n#include \"TinyFS_errno.h\"\n#include <unistd.h>\n\n// store the current disk as a global variable\nint mounted = -1;\n// filetable for files that are open\nlist_t *fileTable = NULL;\n// the max index of the filetable.\nint fdmax = 1;\n\nint tfs_mkfs(char *filename, int nBytes){\n    int diskNum = openDisk(filename, nBytes), i;\n    if (diskNum < 0) {\n        exit(1);\n        // exit with error\n    }\n\n    char buffer[256];\n    for (i = 0; i < 256; i++) {\n        buffer[i] = 0;\n    }\n    buffer[0] = '1';\n    buffer[1] = 'D';\n    // for the free block list\n    buffer[2] = 1;\n\n    int errno =  writeBlock(diskNum, 0, buffer);\n    // if error, do something.\n\n    buffer[0] = '4';\n    int diskSize = lseek(diskNum, 0, SEEK_END);\n    int i = 1;\n    // write in all of the empty blocks\n    for (i; i < diskSize;i++) {\n        // Set the link for the next free block\n        if (i != diskSize - 1) {\n            buffer[2] = i + 1;\n        }\n        writeBlock(diskNum, i, buffer);\n    }\n    closeDisk(diskNum);\n    return 1;\n}\n\n\nint tfs_mount(char *diskname){\n    // Checks if there is something mounted\n    if (mounted != -1) {\n        return EMOUNTED;\n    }\n    int diskNum = openDisk(diskname, 0);\n    if (diskNum < 0) {\n        exit(1);\n        // exit with error\n    }\n\n    char * buffer;\n    int diskSize = lseek(diskNum, 0, SEEK_END)  / 256;\n    int i;\n    // check that all the blocks have the correct checksum: 0x44\n    for (i = 1; i < diskSize;i++) {\n        readBlock(diskNum, i, buffer);\n        if (buffer[1] != 'D') {\n            return EINVALIDTFS;\n        }\n    }\n    // set the currently mounted disk to the disk\n    mounted = diskNum;\n    return 1;\n}\n\nint tfs_unmount(void){\n    // checks if there is something mounted\n    if (mounted == -1) {\n        return EUNMOUNTED;\n    }\n    // wipes the file table\n    cleanListFree(fileTable);\n    // closes the disk opened by mount\n    closeDisk(mounted);\n    return 1;\n}\n\nfileDescriptor tfs_openFile(char *name){\n    int location;\n    char * superblock, *newInode;\n    // if the filetable hasn't been initialized, do it\n    if (fileTable == NULL) {\n        fileTable = malloc(sizeof(list_t));\n    }\n\n    resNode *newNode = NULL;\n    // check if an inode exists for a file. If it doesn't make one. \n    if ((location = checkFileExists(name)) == 0) {\n        // read the next free block off the superblock\n        readBlock(mounted, 0, superblock);\n        location = superblock[2];\n        // read that block to set the superblock's new free list value\n        readBlock(mounted, location, newInode);\n        superblock[2] = newInode[2];\n        \n        // set it that there is no data for this inode\n        newInode[2] = -1;\n\n        // write changes back to the file\n        writeBlock(mounted,0,superblock);\n        writeBlock(mounted,location,newInode);\n    }\n    // setup a new node to add to the fileTable\n    newNode->fd = fdmax++;\n    newNode->inodeIndex = location;\n    strncpy(newNode->name, name, FILENAME_LEN);\n\n    addtoList(fileTable, newNode);\n    return newNode->fd;\n}\n\nint tfs_closeFile(fileDescriptor FD){\n    resNode *data;\n    // remove from the filetable\n    data = removeVal(FD, fileTable);\n    // free up that space\n    free(data);\n    return 0;\n}\n\nint tfs_writeFile(fileDescriptor FD,char *buffer, int size){\n    return 0;\n}\n\nint tfs_deleteFile(fileDescriptor FD){\n    return 0;\n}\n\nint tfs_readByte(fileDescriptor FD, char *buffer){\n    return 0; \n}\n\nint tfs_seek(fileDescriptor FD, int offset){\n    return 0;\n}\n\n// returns the block where the file inode is (if it exists)\nint checkFileExists(char * name) {\n    int i;\n    int diskSize = lseek(mounted, 0, SEEK_END) / 256;\n    char * buffer, *check;\n    for (i = 1; i < diskSize; i++) {\n        readBlock(mounted, i, buffer);\n        if (buffer[0] == 2) {\n            strncpy(check, buffer[4], 8);\n            if (strcmp(name, check) == 0) return i;\n        }\n    }\n    return -1;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/libTinyFS.c b/libTinyFS.c
--- a/libTinyFS.c	(revision dda1f149b0a6ef60a1eb0886178426d0fea9455c)
+++ b/libTinyFS.c	(date 1710651877465)
@@ -129,7 +129,8 @@
 }
 
 int tfs_writeFile(fileDescriptor FD,char *buffer, int size){
-    return 0;
+
+	return 0;
 }
 
 int tfs_deleteFile(fileDescriptor FD){
@@ -137,11 +138,12 @@
 }
 
 int tfs_readByte(fileDescriptor FD, char *buffer){
-    return 0; 
+    return 0;
 }
 
 int tfs_seek(fileDescriptor FD, int offset){
-    return 0;
+	char* filename = NULL;
+	Inode* inode = NULL;
 }
 
 // returns the block where the file inode is (if it exists)
